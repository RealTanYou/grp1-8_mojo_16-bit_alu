/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_3 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] alu,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_add_s;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  reg [1-1:0] M_add_alufn0;
  reg [16-1:0] M_add_a;
  reg [16-1:0] M_add_b;
  adder_5 add (
    .alufn0(M_add_alufn0),
    .a(M_add_a),
    .b(M_add_b),
    .s(M_add_s),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n)
  );
  
  wire [16-1:0] M_bool_boole;
  reg [16-1:0] M_bool_a;
  reg [16-1:0] M_bool_b;
  reg [4-1:0] M_bool_alufn;
  boolean_6 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .alufn(M_bool_alufn),
    .boole(M_bool_boole)
  );
  
  wire [16-1:0] M_comp_comp;
  reg [1-1:0] M_comp_z;
  reg [1-1:0] M_comp_v;
  reg [1-1:0] M_comp_n;
  reg [2-1:0] M_comp_alufn;
  compare_7 comp (
    .z(M_comp_z),
    .v(M_comp_v),
    .n(M_comp_n),
    .alufn(M_comp_alufn),
    .comp(M_comp_comp)
  );
  
  wire [16-1:0] M_shift_shift;
  reg [16-1:0] M_shift_a;
  reg [4-1:0] M_shift_b;
  reg [2-1:0] M_shift_alufn;
  shifter_8 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn(M_shift_alufn),
    .shift(M_shift_shift)
  );
  
  wire [16-1:0] M_mul_p;
  reg [1-1:0] M_mul_alufn0;
  reg [16-1:0] M_mul_a;
  reg [16-1:0] M_mul_b;
  multiply_9 mul (
    .alufn0(M_mul_alufn0),
    .a(M_mul_a),
    .b(M_mul_b),
    .p(M_mul_p)
  );
  
  always @* begin
    alu = 16'h0000;
    z = 1'h0;
    v = 1'h0;
    n = 1'h0;
    M_add_a = a;
    M_add_b = b;
    M_add_alufn0 = alufn[0+0-:1];
    z = M_add_z;
    v = M_add_v;
    n = M_add_n;
    M_mul_a = a;
    M_mul_b = b;
    M_mul_alufn0 = alufn[0+0-:1];
    M_bool_a = a;
    M_bool_b = b;
    M_bool_alufn = alufn[0+3-:4];
    M_shift_a = a;
    M_shift_b = b[0+3-:4];
    M_shift_alufn = alufn[0+1-:2];
    M_comp_z = M_add_z;
    M_comp_v = M_add_v;
    M_comp_n = M_add_n;
    M_comp_alufn = alufn[1+1-:2];
    
    case (alufn[4+1-:2])
      2'h0: begin
        alu = (alufn[1+0-:1] == 1'h0) ? M_add_s : M_mul_p;
      end
      2'h1: begin
        alu = M_bool_boole;
      end
      2'h2: begin
        alu = M_shift_shift;
      end
      2'h3: begin
        alu = M_comp_comp;
      end
      default: begin
        alu = 16'h0000;
      end
    endcase
  end
endmodule
